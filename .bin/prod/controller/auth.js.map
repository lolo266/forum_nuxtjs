{"version":3,"sources":["../../../server/controller/auth.js"],"names":["StringLib","Signin","req","res","username","password","body","Case","auth","User","Server","DB","Users","findOne","select","Token","jwt","sign","id","_id","Config","secret","expiresIn","json","err","token","user","e","status","toString","Signup","email","$or","NewUser","profile","name","save","Get","send"],"mappings":"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","file":"auth.js","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport * as StringLib from '../plugins/stringcase' ;\r\n\r\nexport const Signin = async (req, res) => {\r\n    let { username, password } = req.body;\r\n    username = StringLib.Case(username, '');\r\n\r\n    try {\r\n        if(req.auth) throw 'Bạn đã đăng nhập tài khoản';\r\n        if(username == '' || password == '') throw 'Dữ liệu đầu vào không đủ';\r\n\r\n        let User = await Server.DB.Users\r\n        .findOne({'auth.username': username})\r\n        .select('auth profile');\r\n        \r\n        if(!User) throw 'Tài khoản này không tồn tại';\r\n        if(User.auth.password != password) throw 'Mật khẩu không chính xác';\r\n\r\n        //Token\r\n        let Token = jwt.sign({\r\n            id: User._id\r\n        }, Server.Config.secret, { expiresIn: 30 * 24 * 60 * 60 });\r\n\r\n        //End\r\n        res.json({err: false, token: Token, user: User});\r\n    }\r\n    catch(e){\r\n        res.json({err: true, status: e.toString()});\r\n    }\r\n}\r\n\r\nexport const Signup = async (req, res) => {\r\n    let { username, password, email } = req.body;\r\n    username = StringLib.Case(username, '');\r\n\r\n    try {\r\n        if(req.auth) throw 'Bạn đã đăng nhập tài khoản';\r\n        if(username == '' || password == '' || email == '') throw 'Dữ liệu đầu vào không đủ';\r\n\r\n        let User = await Server.DB.Users\r\n        .findOne({$or : [ {'auth.username': username}, {'profile.email': email} ]})\r\n        .select('auth');\r\n\r\n        if(User) throw 'Tài khoản hoặc email đã tồn tại'\r\n\r\n        //New User\r\n        let NewUser = new Server.DB.Users({\r\n            auth: {\r\n                username: username,\r\n                password: password\r\n            },\r\n            profile: {\r\n                name: username,\r\n                email: email,       \r\n            }\r\n        });\r\n\r\n        //Save\r\n        await NewUser.save();\r\n\r\n        //Token\r\n        let Token = jwt.sign({\r\n            id: NewUser._id\r\n        }, Server.Config.secret, { expiresIn: 30 * 24 * 60 * 60 });\r\n\r\n        //Send\r\n        res.json({err: false, token: Token, user: NewUser});\r\n    }\r\n    catch(e){\r\n        res.json({err: true, status: e.toString()});\r\n    }\r\n}\r\n\r\nexport const Get = async (req, res) => {\r\n    try {\r\n        if(!req.auth) throw true;\r\n\r\n        let User = await Server.DB.Users\r\n        .findOne({'_id': req.auth})\r\n        .select('profile');\r\n\r\n        if(!User) throw true\r\n        \r\n        res.json({user: User});\r\n    }\r\n    catch(e){\r\n        res.status(401).send('Lỗi xác thực tài khoản');\r\n    }\r\n}"]}