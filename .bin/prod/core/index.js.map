{"version":3,"sources":["../../../server/core/index.js"],"names":["Nuxt","Express","Socket","Mongo","Middleware","Core","constructor","Config","require","path","resolve","Log","Msg","lang","App","Init","HTTP","http","createServer","IO","DB","APIs","Routes","Sockets","Models","Middlewares","Run","Info","build","start","MongoConect","BuildModel","BuildAPI","BuildIO","HTTPStart","global","Server","e","Error","toString","error","end","listen","process","env","PORT","port","Show","server","NODE_ENV","then","ipv4","Network"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AAGA;;IAAYA,I;;AACZ;;IAAYC,O;;AACZ;;IAAYC,M;;AACZ;;IAAYC,K;;AACZ;;IAAYC,U;;AAGZ;;;;;;;;AARA;AAUe,MAAMC,IAAN,CAAW;AACtBC,kBAAa;AACT,aAAKC,MAAL,GAAcC,QAAQC,eAAKC,OAAL,CAAa,iBAAb,CAAR,CAAd;AACA,aAAKC,GAAL,GAAW,IAAIA,aAAJ,EAAX;AACA,aAAKC,GAAL,GAAWJ,QAAQC,eAAKC,OAAL,CAAc,UAAS,KAAKH,MAAL,CAAYM,IAAK,EAAxC,CAAR,CAAX;AACA,aAAKC,GAAL,GAAWb,QAAQc,IAAR,CAAa,KAAKR,MAAlB,CAAX;AACA,aAAKS,IAAL,GAAYC,eAAKC,YAAL,CAAkB,KAAKJ,GAAvB,CAAZ;AACA,aAAKK,EAAL,GAAUjB,OAAOa,IAAP,CAAY,KAAKC,IAAjB,CAAV;AACA,aAAKI,EAAL,GAAU,IAAV;;AAEA;AACA,aAAKC,IAAL,GAAY,EAAZ;AACA,aAAKC,MAAL,GAAc,EAAd;AACA,aAAKC,OAAL,GAAe,EAAf;AACA,aAAKC,MAAL,GAAc,EAAd;AACA,aAAKC,WAAL,GAAmB,EAAnB;AACH;AACD,UAAMC,GAAN,GAAW;AACP,aAAKf,GAAL,CAASgB,IAAT,CAAc,KAAKf,GAAL,CAASgB,KAAT,CAAeC,KAA7B;AACA,YAAI;AACA,kBAAMzB,WAAWW,IAAX,CAAgB,IAAhB,CAAN;AACA,gBAAIe,cAAc,MAAM3B,MAAMY,IAAN,CAAW,IAAX,CAAxB;AACA,gBAAIgB,aAAa,MAAM5B,MAAM4B,UAAN,CAAiB,KAAKP,MAAtB,EAA8B,IAA9B,CAAvB;AACA,gBAAIQ,WAAW,MAAM/B,QAAQ+B,QAAR,CAAiB,KAAKX,IAAtB,EAA4B,IAA5B,CAArB;AACA,gBAAIY,UAAU,MAAM/B,OAAO+B,OAAP,CAAe,KAAKV,OAApB,EAA6B,IAA7B,CAApB;AACA,kBAAMvB,KAAKe,IAAL,CAAU,KAAKD,GAAf,CAAN;;AAEA,iBAAKM,EAAL,GAAUW,UAAV;;AAEA,iBAAKG,SAAL;AACAC,mBAAOC,MAAP,GAAgB,IAAhB;AACH,SAZD,CAaA,OAAMC,CAAN,EAAQ;AACJ,iBAAK1B,GAAL,CAAS2B,KAAT,CAAeD,EAAEE,QAAF,EAAf;AACA,iBAAK5B,GAAL,CAASgB,IAAT,CAAc,KAAKf,GAAL,CAASgB,KAAT,CAAeY,KAA7B;AACH;AACJ;AACDN,gBAAW;AACP,aAAKvB,GAAL,CAASgB,IAAT,CAAc,KAAKf,GAAL,CAASgB,KAAT,CAAea,GAA7B;AACA,aAAKzB,IAAL,CAAU0B,MAAV,CAAiBC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,KAAKtC,MAAL,CAAYuC,IAAjD;;AAEA,aAAKnC,GAAL,CAASoC,IAAT,CAAe,GAAE,KAAKnC,GAAL,CAASoC,MAAT,CAAgBnB,KAAM,EAAvC;;AAEA,YAAG,EAAEc,QAAQC,GAAR,CAAYK,QAAZ,KAAyB,YAA3B,CAAH,EAA4C;AACxC,gBAAG,KAAK1C,MAAL,CAAYuC,IAAZ,KAAqB,IAAxB,EAA8B,OAAO,KAAKnC,GAAL,CAASoC,IAAT,CAAe,oBAAmB,KAAKxC,MAAL,CAAYuC,IAAK,EAAnD,CAAP;AAC9B,8CAAmBI,IAAnB,CAAyBC,IAAD,IAAU;AAC9B,qBAAKxC,GAAL,CAASyC,OAAT,CAAkB,UAASD,IAAK,EAAhC;AACH,aAFD;AAGH;AACJ;AAjDqB;kBAAL9C,I;;AAHrB","file":"index.js","sourcesContent":["import path from 'path';\r\nimport http from 'http';\r\nimport localIpV4Address from 'local-ipv4-address';\r\n\r\n//Init\r\nimport * as Nuxt from './init/nuxt_init';\r\nimport * as Express from './init/express_init';\r\nimport * as Socket from './init/socket_init';\r\nimport * as Mongo from './init/mongodb_init';\r\nimport * as Middleware from './init/middleware_init';\r\n\r\n//Log\r\nimport Log from './lib/log';\r\n\r\nexport default class Core {\r\n    constructor(){\r\n        this.Config = require(path.resolve('./app.config.js'));\r\n        this.Log = new Log();\r\n        this.Msg = require(path.resolve(`./lang/${this.Config.lang}`));\r\n        this.App = Express.Init(this.Config);\r\n        this.HTTP = http.createServer(this.App);\r\n        this.IO = Socket.Init(this.HTTP);\r\n        this.DB = null;\r\n\r\n        //List\r\n        this.APIs = [];\r\n        this.Routes = [];\r\n        this.Sockets = [];\r\n        this.Models = [];\r\n        this.Middlewares = [];\r\n    }\r\n    async Run(){\r\n        this.Log.Info(this.Msg.build.start);\r\n        try {\r\n            await Middleware.Init(this);\r\n            let MongoConect = await Mongo.Init(this);\r\n            let BuildModel = await Mongo.BuildModel(this.Models, this);\r\n            let BuildAPI = await Express.BuildAPI(this.APIs, this);\r\n            let BuildIO = await Socket.BuildIO(this.Sockets, this);\r\n            await Nuxt.Init(this.App);\r\n            \r\n            this.DB = BuildModel;\r\n\r\n            this.HTTPStart();\r\n            global.Server = this;\r\n        }\r\n        catch(e){\r\n            this.Log.Error(e.toString());\r\n            this.Log.Info(this.Msg.build.error);\r\n        }\r\n    }\r\n    HTTPStart(){\r\n        this.Log.Info(this.Msg.build.end);\r\n        this.HTTP.listen(process.env.PORT || this.Config.port);\r\n\r\n        this.Log.Show(`${this.Msg.server.start}`);\r\n        \r\n        if(!(process.env.NODE_ENV === 'production')){\r\n            if(this.Config.port !== '80') return this.Log.Show(`http://localhost:${this.Config.port}`);\r\n            localIpV4Address().then((ipv4) => {\r\n                this.Log.Network(`http://${ipv4}`);\r\n            });\r\n        }\r\n    }\r\n}"]}