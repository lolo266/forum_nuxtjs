{"version":3,"sources":["../../../../server/core/init/mongodb_init.js"],"names":["Init","BuildModel","server","bluebird","promisifyAll","mongoose","Promise","res","rej","connect","Config","database","useUnifiedTopology","useCreateIndex","useNewUrlParser","useFindAndModify","bufferCommands","bufferMaxEntries","Log","Show","Msg","true","e","Error","false","toString","List","Server","ModelList","Array","isArray","build","model","length","forEach","name","path","nameCheck","_","find","o","dupe","push","models"],"mappings":";;;;;QAIgBA,I,GAAAA,I;QAsBAC,U,GAAAA,U;;AA1BhB;;;;AACA;;;;AACA;;;;;;AAEO,SAASD,IAAT,CAAcE,MAAd,EAAqB;AACxBC,uBAASC,YAAT,CAAsBC,kBAAtB;AACA,WAAO,IAAIC,OAAJ,CAAY,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACnC,YAAI;AACA,kBAAMH,mBAASI,OAAT,CAAiBP,OAAOQ,MAAP,CAAcC,QAA/B,EAAyC;AAC3CC,oCAAoB,IADuB;AAE3CC,gCAAgB,IAF2B;AAG3CC,iCAAiB,IAH0B;AAI3CC,kCAAkB,KAJyB;AAK3CC,gCAAgB,KAL2B;AAM3CC,kCAAkB;AANyB,aAAzC,CAAN;AAQAf,mBAAOgB,GAAP,CAAWC,IAAX,CAAgBjB,OAAOkB,GAAP,CAAWT,QAAX,CAAoBF,OAApB,CAA4BY,IAA5C;AACAd,gBAAI,IAAJ;AACH,SAXD,CAYA,OAAMe,CAAN,EAAQ;AACJpB,mBAAOgB,GAAP,CAAWK,KAAX,CAAiBrB,OAAOkB,GAAP,CAAWT,QAAX,CAAoBF,OAApB,CAA4Be,KAA7C;AACAhB,gBAAIc,EAAEG,QAAF,EAAJ;AACH;AACJ,KAjBM,CAAP;AAkBH;;AAEM,SAASxB,UAAT,CAAoByB,IAApB,EAA0BC,MAA1B,EAAiC;AACpC,WAAO,IAAIrB,OAAJ,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC7B,YAAIoB,YAAY,EAAhB;;AAEA,YAAG,CAACF,IAAD,IAASG,MAAMC,OAAN,CAAcJ,IAAd,KAAuB,KAAnC,EAA0C,OAAOlB,IAAImB,OAAOP,GAAP,CAAWW,KAAX,CAAiBC,KAAjB,CAAuBR,KAA3B,CAAP;AAC1C,YAAGE,KAAKO,MAAL,GAAc,CAAjB,EAAoB,OAAO1B,KAAP;;AAEpBmB,aAAKQ,OAAL,CAAaZ,KAAK;AACd,gBAAG,CAACA,EAAEa,IAAH,IAAW,CAACb,EAAEc,IAAjB,EAAuB,OAAO5B,IAAImB,OAAOP,GAAP,CAAWW,KAAX,CAAiBC,KAAjB,CAAuBR,KAA3B,CAAP;;AAEvB;AACA,gBAAIa,YAAYC,iBAAEC,IAAF,CAAOX,SAAP,EAAmBY,CAAD,IAAO;AAAE,uBAAOA,KAAKlB,EAAEa,IAAd;AAAqB,aAAhD,CAAhB;AACA,gBAAGE,SAAH,EAAc,OAAO7B,IAAK,GAAEmB,OAAOP,GAAP,CAAWW,KAAX,CAAiBC,KAAjB,CAAuBS,IAAK,KAAInB,EAAEa,IAAK,GAA9C,CAAP;AACdP,sBAAUc,IAAV,CAAepB,EAAEa,IAAjB;;AAEA;AACA9B,+BAAS2B,KAAT,CAAeV,EAAEa,IAAjB,EAAuBb,EAAEc,IAAzB;;AAEA;AACA,gBAAGR,UAAUK,MAAV,IAAoBP,KAAKO,MAA5B,EACIN,OAAOT,GAAP,CAAWC,IAAX,CAAgBQ,OAAOP,GAAP,CAAWW,KAAX,CAAiBC,KAAjB,CAAuBX,IAAvC;AACAd,gBAAIF,mBAASsC,MAAb;AACP,SAfD;AAgBH,KAtBM,CAAP;AAuBH","file":"mongodb_init.js","sourcesContent":["import _ from 'lodash';\r\nimport mongoose from 'mongoose';\r\nimport bluebird from 'bluebird';\r\n\r\nexport function Init(server){\r\n    bluebird.promisifyAll(mongoose);\r\n    return new Promise(async (res, rej) => {\r\n        try {\r\n            await mongoose.connect(server.Config.database, { \r\n                useUnifiedTopology: true,\r\n                useCreateIndex: true,\r\n                useNewUrlParser: true,\r\n                useFindAndModify: false,\r\n                bufferCommands: false,\r\n                bufferMaxEntries: 0\r\n            });\r\n            server.Log.Show(server.Msg.database.connect.true)\r\n            res(true);\r\n        }\r\n        catch(e){\r\n            server.Log.Error(server.Msg.database.connect.false)\r\n            rej(e.toString());\r\n        }\r\n    });\r\n}\r\n\r\nexport function BuildModel(List, Server){\r\n    return new Promise((res, rej) => {\r\n        let ModelList = [];\r\n\r\n        if(!List || Array.isArray(List) == false) return rej(Server.Msg.build.model.false);\r\n        if(List.length < 1) return res();\r\n\r\n        List.forEach(e => {\r\n            if(!e.name || !e.path) return rej(Server.Msg.build.model.false);\r\n\r\n            //Check route name\r\n            let nameCheck = _.find(ModelList, (o) => { return o == e.name; });\r\n            if(nameCheck) return rej(`${Server.Msg.build.model.dupe} \"${e.name}\"`);\r\n            ModelList.push(e.name);\r\n\r\n            //Set Model\r\n            mongoose.model(e.name, e.path);\r\n\r\n            //Done\r\n            if(ModelList.length == List.length)\r\n                Server.Log.Show(Server.Msg.build.model.true);\r\n                res(mongoose.models);\r\n        });\r\n    });\r\n}"]}