{"version":3,"sources":["../../../../server/core/init/socket_init.js"],"names":["Init","BuildIO","http","io","List","Server","Promise","res","rej","SocketList","Array","isArray","Msg","build","socket","false","length","forEach","e","name","path","nameCheck","_","find","o","dupe","push","IO","of","Log","Show","true"],"mappings":";;;;;QAGgBA,I,GAAAA,I;QAKAC,O,GAAAA,O;;AARhB;;;;AACA;;;;;;AAEO,SAASD,IAAT,CAAcE,IAAd,EAAmB;AACtB,UAAMC,KAAM,sBAASD,IAAT,CAAZ;AACA,WAAOC,EAAP;AACH;;AAEM,SAASF,OAAT,CAAiBG,IAAjB,EAAuBC,MAAvB,EAA8B;AACjC,WAAO,IAAIC,OAAJ,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC7B,YAAIC,aAAa,EAAjB;AACA,YAAGC,MAAMC,OAAN,CAAcP,IAAd,KAAuB,KAA1B,EAAiC,OAAOI,IAAIH,OAAOO,GAAP,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,KAA5B,CAAP;AACjC,YAAGX,KAAKY,MAAL,GAAc,CAAjB,EAAoB,OAAOT,KAAP;;AAEpBH,aAAKa,OAAL,CAAaC,KAAK;AACd,gBAAG,CAACA,EAAEC,IAAH,IAAW,CAACD,EAAEE,IAAjB,EAAuB,OAAOZ,IAAIH,OAAOO,GAAP,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,KAA5B,CAAP;;AAEvB;AACA,gBAAIM,YAAYC,iBAAEC,IAAF,CAAOd,UAAP,EAAoBe,CAAD,IAAO;AAAE,uBAAOA,KAAKN,EAAEC,IAAd;AAAqB,aAAjD,CAAhB;AACA,gBAAGE,SAAH,EAAc,OAAOb,IAAK,GAAEH,OAAOO,GAAP,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBW,IAAK,KAAIP,EAAEC,IAAK,GAA/C,CAAP;AACdV,uBAAWiB,IAAX,CAAgBR,EAAEC,IAAlB;;AAEA;AACA,gBAAIhB,KAAKE,OAAOsB,EAAP,CAAUC,EAAV,CAAc,IAAGV,EAAEC,IAAK,EAAxB,CAAT;AACA;AACA;AACA;AACAD,cAAEE,IAAF,CAAOjB,EAAP;;AAEA;AACA,gBAAGM,WAAWO,MAAX,IAAqBZ,KAAKY,MAA7B,EAAoC;AAChCX,uBAAOwB,GAAP,CAAWC,IAAX,CAAgBzB,OAAOO,GAAP,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBiB,IAAxC;AACAxB;AACH;AACJ,SApBD;AAqBH,KA1BM,CAAP;AA2BH","file":"socket_init.js","sourcesContent":["import _ from 'lodash';\r\nimport socketio from 'socket.io';\r\n\r\nexport function Init(http){\r\n    const io =  socketio(http);\r\n    return io;\r\n}\r\n\r\nexport function BuildIO(List, Server){\r\n    return new Promise((res, rej) => {\r\n        let SocketList = [];\r\n        if(Array.isArray(List) == false) return rej(Server.Msg.build.socket.false);\r\n        if(List.length < 1) return res();\r\n\r\n        List.forEach(e => {\r\n            if(!e.name || !e.path) return rej(Server.Msg.build.socket.false);\r\n\r\n            //Check route name\r\n            let nameCheck = _.find(SocketList, (o) => { return o == e.name; });\r\n            if(nameCheck) return rej(`${Server.Msg.build.socket.dupe} \"${e.name}\"`);\r\n            SocketList.push(e.name);\r\n\r\n            //Set Socket\r\n            let io = Server.IO.of(`/${e.name}`)\r\n            //io.on('connect', (socket) => {\r\n            //    e.path(io, socket)\r\n            //});  \r\n            e.path(io) \r\n\r\n            //Done\r\n            if(SocketList.length == List.length){\r\n                Server.Log.Show(Server.Msg.build.socket.true);\r\n                res();\r\n            }\r\n        });\r\n    });\r\n}"]}