{"version":3,"sources":["../../../../server/core/init/express_init.js"],"names":["Init","BuildAPI","config","App","use","bodyParser","json","limit","urlencoded","extended","level","threshold","helmet","frameguard","xssFilter","noSniff","ieNoOpen","hsts","maxAge","includeSubDomains","force","disable","List","Server","Promise","res","rej","APIList","Array","isArray","Msg","build","api","false","length","forEach","e","name","path","nameCheck","_","find","o","dupe","push","Api","express","Router","middleware","ListMiddleware","words","item","Middleware","Middlewares","m","requireMiddleware","require","req","next","Log","Show","true"],"mappings":"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","file":"express_init.js","sourcesContent":["import _ from 'lodash';\r\nimport express from 'express';\r\nimport cors from 'cors';\r\nimport helmet from 'helmet';\r\nimport bodyParser from 'body-parser';\r\nimport cookieParser from 'cookie-parser';\r\nimport compression from 'compression';\r\n\r\nexport function Init(config){\r\n    let App = express();\r\n\r\n    App.use(cors());\r\n    App.use(bodyParser.json({limit: '50mb'}));\r\n    App.use(bodyParser.urlencoded({limit: '50mb', extended: true}));\r\n    App.use(compression({ level: 9, threshold: 0 }));\r\n    \r\n    App.use(helmet.frameguard());\r\n    App.use(helmet.xssFilter());\r\n    App.use(helmet.noSniff());\r\n    App.use(helmet.ieNoOpen());\r\n    App.use(helmet.hsts({ maxAge: 15778476, includeSubDomains: true, force: true }));\r\n    App.disable('x-powered-by');\r\n\r\n    App.use(cookieParser());\r\n    return App;\r\n}\r\n\r\nexport function BuildAPI(List, Server){\r\n    return new Promise((res, rej) => {\r\n        let APIList = [];\r\n        if(Array.isArray(List) == false) return rej(Server.Msg.build.api.false);\r\n        if(List.length < 1) return res();\r\n\r\n        List.forEach(e => {\r\n            if(!e.name || !e.path) return rej(Server.Msg.build.api.false);\r\n\r\n            //Check route name\r\n            let nameCheck = _.find(APIList, (o) => { return o == e.name; });\r\n            if(nameCheck) return rej(`${Server.Msg.build.api.dupe} \"${e.name}\"`);\r\n            APIList.push(e.name);\r\n\r\n            //Set Api\r\n            let Api = express.Router();\r\n            Server.App.use(`/api/${e.name}`, Api);\r\n\r\n            //Set Middleware\r\n            if(!e.middleware) return e.path(Api);\r\n\r\n            let ListMiddleware = _.words(e.middleware);\r\n            ListMiddleware.forEach(item => {\r\n                let Middleware = Server.Middlewares.find(m => m.name == item);\r\n                if(!Middleware) return false;\r\n\r\n                let requireMiddleware =  require(Middleware.path);\r\n                Api.use((req, res, next) => {\r\n                    requireMiddleware(req, res, next);\r\n                });\r\n            });\r\n            e.path(Api);\r\n        }); \r\n\r\n        Server.Log.Show(Server.Msg.build.api.true);\r\n        res();\r\n    });\r\n}"]}